plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'

    // 参考 https://github.com/openjfx/javafx-gradle-plugin#extra-plugins
    // 不加入此会出现找不到模块错误
    id 'org.javamodularity.moduleplugin' version '1.8.15'

    // 请使用高版本，’2.26.0‘实测出现 "Unsupported class file major version 65"错误
    id 'org.beryx.jlink' version '3.1.1'

    id 'idea'
    id 'java'
}

//java {
//    modularity.inferModulePath.set(false)
//}

// java版本选择21（LTS）
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

version = '1.0.1'

javafx {
    version = "21" // LTS
    modules = ['javafx.controls', 'javafx.fxml','javafx.web']
}

application{
    mainModule.set("quickoutline")
    mainClass.set("com.ririv.quickoutline.view.App")
}

// compile 不要用了，已经废弃了
// 不能下载请配置gradle代理
dependencies {
//    implementation 'com.jfoenix:jfoenix:9.0.10' //官方版本，不更新了
    implementation 'org.rationalityfrontline.workaround:jfoenix:21.0.0'
    implementation 'com.itextpdf:kernel:9.0.0'
    implementation 'com.itextpdf:io:9.0.0'
    implementation 'com.itextpdf:layout:9.0.0'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
//    implementation 'io.github.palexdev:materialfx:11.12.0'  //考虑换一个UI库
}

repositories {
    //使用https，http会报警告
//    maven { url 'https://maven.aliyun.com/repository/public/' }
//    maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
//    maven { url 'https://mirrors.cloud.tencent.com/gradle/'}
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()
}





def args = [
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-exports=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-exports=java.base/java.lang.reflect=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED",
        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
        "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",
        "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.reflect=com.jfoenix"
]



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
//    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" // 调试用
}


run {
    jvmArgs = args
}




def os = org.gradle.internal.os.OperatingSystem.current()

//https://badass-jlink-plugin.beryx.org/releases/latest/
jlink {
    launcher {
        name = 'QuickOutline'
        jvmArgs = args

    }
//    https://walczak.it/blog/distributing-javafx-desktop-applications-without-requiring-jvm-using-jlink-and-jpackage
    jpackage {
//        skipInstaller = true
        def installerOptionsParams = [
                '--vendor', 'riri Personal', //必须加，否则报错
                '--app-version', version,
        ]

        println('Current OS: '+os)

        if (os.isWindows()){
            icon = 'src/main/resources/com/ririv/quickoutline/view/icon/icon.ico'
//            installerType = 'msi' //或exe
            installerOptions = [
                    '--win-shortcut',    // TODO 这两行没生效
                    '--win-dir-chooser',
            ]+installerOptionsParams

        }
        if (os.isMacOsX())
            icon = 'src/main/resources/com/ririv/quickoutline/view/icon/icon.icns'
            installerOptions = installerOptionsParams
    }

}







